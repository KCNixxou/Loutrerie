// Gestion de la boutique

// Fonction pour g√©rer l'affichage de la boutique
async function handleShop(interaction) {
    try {
        const { EmbedBuilder } = require('discord.js');
        const shopItems = interaction.client.config.shop;
        
        // Log pour d√©boguer
        console.log('Articles disponibles dans la boutique:', Object.keys(shopItems));
        
        // Cr√©er un embed pour la boutique
        const embed = new EmbedBuilder()
            .setTitle('üõçÔ∏è Boutique de la Loutrerie')
            .setDescription('Utilisez la commande `/acheter` avec le nom de l\'article pour effectuer un achat.')
            .setColor(0x00bfff);
        
        // Cat√©gorie des r√¥les BDG
        const bdgItems = Object.entries(shopItems)
            .filter(([key]) => key.startsWith('bdg'))
            .map(([_, item]) => `‚Ä¢ **${item.name}** - ${item.price.toLocaleString()} ${interaction.client.config.currency.emoji}`)
            .join('\n');
        
        // Cat√©gorie des r√¥les BDH
        const bdhItems = Object.entries(shopItems)
            .filter(([key]) => key.startsWith('bdh'))
            .map(([key, item]) => {
                console.log(`Article BDH trouv√©: ${key} - ${item.name}`);
                return `‚Ä¢ **${item.name}** - ${item.price.toLocaleString()} ${interaction.client.config.currency.emoji}`;
            })
            .join('\n');
            
        console.log('Articles BDH format√©s:', bdhItems);
        
        // Autres articles
        const otherItems = Object.entries(shopItems)
            .filter(([key]) => !key.startsWith('bdg') && !key.startsWith('bdh'))
            .map(([_, item]) => `‚Ä¢ **${item.name}** - ${item.price.toLocaleString()} ${interaction.client.config.currency.emoji}`)
            .join('\n');
        
        // Ajouter les champs √† l'embed
        if (bdgItems) {
            embed.addFields({
                name: 'üèÜ R√¥les BDG',
                value: bdgItems,
                inline: false
            });
        }
        
        if (bdhItems && bdhItems.length > 0) {
            console.log('Ajout des r√¥les BDH √† l\'embed');
            embed.addFields({
                name: 'üèÜ R√¥les BDH',
                value: bdhItems,
                inline: false
            });
        } else {
            console.log('Aucun r√¥le BDH √† afficher');
        }
        
        if (otherItems) {
            embed.addFields({
                name: 'üéÅ Autres articles',
                value: otherItems,
                inline: false
            });
        }
        
        // Ajouter le solde de l'utilisateur
        const user = interaction.client.database.ensureUser(interaction.user.id);
        embed.setFooter({ 
            text: `Votre solde: ${user.balance || 0} ${interaction.client.config.currency.emoji}`,
            iconURL: interaction.user.displayAvatarURL()
        });
        
        await interaction.reply({
            embeds: [embed],
            ephemeral: true
        });
        
    } catch (error) {
        console.error('Erreur lors de l\'affichage de la boutique:', error);
        await interaction.reply({
            content: '‚ùå Une erreur est survenue lors de l\'affichage de la boutique. Veuillez r√©essayer plus tard.',
            ephemeral: true
        });
    }
}

// Fonction pour g√©rer les achats
async function handlePurchase(interaction) {
    try {
        const itemId = interaction.options.getString('item');
        const userId = interaction.user.id;
        const member = interaction.member;
        const user = interaction.client.database.ensureUser(userId);
        
        // V√©rifier si l'item existe dans la configuration
        const item = interaction.client.config.shop[itemId];
        if (!item) {
            return interaction.reply({
                content: '‚ùå Cet article n\'existe pas dans la boutique.',
                ephemeral: true
            });
        }
        
        // V√©rifier si l'utilisateur a assez d'argent
        if (user.balance < item.price) {
            return interaction.reply({
                content: `‚ùå Tu n'as pas assez de coquillages pour acheter ${item.name}. Il te manque ${item.price - user.balance} ${interaction.client.config.currency.emoji}.`,
                ephemeral: true
            });
        }
        
        // V√©rifier si l'utilisateur a d√©j√† un r√¥le du m√™me type (BDG ou BDH)
        const roleType = itemId.startsWith('bdg') ? 'BDG' : itemId.startsWith('bdh') ? 'BDH' : null;
        if (roleType) {
            const existingRole = member.roles.cache.find(role => 
                role.name.includes(roleType)
            );
            
            if (existingRole) {
                return interaction.reply({
                    content: `‚ùå Tu as d√©j√† un r√¥le ${roleType}. Tu ne peux en avoir qu'un seul √† la fois.`,
                    ephemeral: true
                });
            }
        }
        
        // Trouver le r√¥le correspondant
        const role = interaction.guild.roles.cache.find(r => r.name === item.role);
        if (!role) {
            return interaction.reply({
                content: '‚ùå Le r√¥le associ√© √† cet article n\'a pas √©t√© trouv√©. Contactez un administrateur.',
                ephemeral: true
            });
        }
        
        // Retirer l'argent de l'utilisateur
        interaction.client.database.updateUser(userId, {
            balance: user.balance - item.price
        });
        
        // Ajouter le r√¥le √† l'utilisateur
        await member.roles.add(role);
        
        // R√©pondre avec succ√®s
        await interaction.reply({
            content: `‚úÖ F√©licitations ! Tu as achet√© **${item.name}** pour ${item.price} ${interaction.client.config.currency.emoji} !`,
            ephemeral: true
        });
        
    } catch (error) {
        console.error('Erreur lors de l\'achat:', error);
        if (!interaction.replied) {
            await interaction.reply({
                content: '‚ùå Une erreur est survenue lors de l\'achat. Veuillez r√©essayer plus tard.',
                ephemeral: true
            });
        }
    }
}

// Exporter les fonctions
module.exports = {
    handleShop,
    handlePurchase
};
